syntax = "proto3";

package dto;
option go_package = "generated/types";

import "google/protobuf/timestamp.proto";

message MempoolInternalMessage {
  bool ihr_disabled = 1;  	// ihr_disabled : Bool
  bool bounce = 2;  	// bounce : Bool
  bool bounced = 3;  	// bounced : Bool
  bytes src = 4;  	// src : MsgAddressInt
  bytes dest = 5;  	// dest : MsgAddressInt
  bytes value = 6;  	// value : CurrencyCollection
  bytes ihr_fee = 7;  	// ihr_fee : Grams
  bytes fwd_fee = 8;  	// fwd_fee : Grams
  uint64 created_lt = 9;  	// created_lt : uint64
  uint32 created_at = 10;  	// created_at : uint32
}

message MempoolExternalInMessage {
  bytes src = 1;  	// src : MsgAddressInt
  bytes dest = 2;  	// dest : MsgAddressExt
  uint64 created_lt = 3;  	// created_lt : uint64
  uint32 created_at = 4;  	// created_at : uint32
}

message MempoolProcessedMessage {
  bytes hash = 1;

  oneof info {
    MempoolInternalMessage internal_message = 2;
    MempoolExternalInMessage external_in_message = 3;
  }

  message Init {
    optional bytes code = 1;
    optional bytes data = 2;
  }

  optional Init init = 4;

  bytes in_msg = 5;

  uint64 gas_spent = 6;

  repeated bytes out_msgs = 7;

  optional bool compute_phase_success = 8;
  optional bool compute_phase_msg_state_used = 9;
  optional bool compute_phase_account_activated = 10;
  optional bool compute_phase_out_of_gas = 11;
  optional bool compute_phase_accepted = 12;
  optional uint64 compute_phase_exit_code = 13;

  optional bool action_phase_success = 14;
  optional uint64 action_phase_result_code = 15;
}

// Represents a single external message in the mempool.
message MempoolExternalMessage {
  bytes hash = 1;
  int32 workchain_id = 2;
  bytes shard = 3;
  bytes data = 4;
  bytes std_smc_address = 5;
  uint64 gas_spent = 6;

  repeated bytes out_msgs = 7;
  repeated MempoolProcessedMessage processed_messages = 8;
}

// Represents a collection of messages in the mempool with emulation results.
message MempoolPacket {
  google.protobuf.Timestamp server_ts = 1; // Server timestamp when the messages were recorded.
  uint32 expiration_ns = 2;                // Expiration time in nanoseconds for the message.
  repeated MempoolExternalMessage external_messages = 3; // List of external messages.
}

// Represents an external message.
message ExternalMessage {
  bytes data = 1; // Encoded message data.
}

// Represents a unique internal or external message
// that is expected to be generated during the execution of a bundle
// within the same shard.
message ExpectGenerateMessage {
  bool is_internal = 1;                     // Whether the expected message is internal (true) or external (false).
  bytes std_smc_address = 2;       // Match by recipient address (standard smart contract address format).
  int32 in_msg_body_opcode = 3;   // Match by opcode in the incoming message body.
}

// A wrapper for different types of bundle verification rules.
// Only one rule can be used per entry.
message BundleVerificationRule {
  oneof rule {
    ExpectGenerateMessage expect_message = 1;
  }
}

// Represents a bundle of messages to be processed together on the validator's side.
message ValidatorBundle {
  repeated ExternalMessage message = 1; // List of external messages in the bundle.
  google.protobuf.Timestamp expiration_ns = 2; // Timestamp when the bundle should be expired and not included in any future blocks.
  string id = 3; // Unique bundle identifier.
  repeated BundleVerificationRule verification_rules = 4; // Rules that must be satisfied during bundle inclusion.
}

// Represents a bundle of messages to be processed together on the engine side.
message Bundle {
  repeated ExternalMessage message = 1; // List of external messages in the bundle.
  google.protobuf.Timestamp expiration_ns = 2; // Timestamp when the bundle should be expired and not included in any future blocks.
  repeated BundleVerificationRule verification_rules = 3; // Rules to validate during emulation.
}